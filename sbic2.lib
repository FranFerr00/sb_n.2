import("stdfaust.lib");

//=================================================================================================================
//scaler
//=================================================================================================================
scaler(a,b,c,d,x)=((x-a)/(b-a))*(d-c);


//=================================================================================================================
//low pass onepole
//=================================================================================================================

//----2 pi greco----------------------------------------------------
twopi=2*ma.PI;
//----velocitÃ  angolare----------------------------------------------------
omega(fc)=fc*twopi/ma.SR;

//--------------------------------------------------------
aapp(fc)=1-pow(ma.E,0-omega(fc));
aappint(fc)=pow(ma.E,(0-omega(fc)));
lp1pm(fc,x)=(x+_: *(aapp(fc)):+~_)~(0-_);


//=================================================================================================================
//integrator
//=================================================================================================================


lp1p(g)= *(1-g):+~*(g);
integrator(s)=_:abs:lp1p(aappint(1/s));
integrator2(s)=_:abs:lp1p(aapp(1/s));
//=================================================================================================================
//random walker
//=================================================================================================================
rndw(frw,imin,imax,omin,omax,s) = no.pink_noise*10 : lp1pm(frw) : scaler(imin,imax,omin,omax):integrator(s);

//=================================================================================================================
//random walker multi
//=================================================================================================================


avgIntegrator(i,frw) = _*100*(i+1):lp1pm(frw);



rndwmc(frw,imin,imax,omin,omax) = no.multinoise(8): par(i,8,avgIntegrator(i,frw)) : par(i,8,scaler(imin,imax,omin,(omax*(i+1)))):par(i,8,integrator(0.5));

//rd router
rw=rndw(frw,-1,1,0,1,1):ba.sAndH(ba.pulsen(1,ma.SR/(frw*10))):ba.bitcrusher(1):integrator(0.1)*g;


//=================================================================================================================
//deviation
//=================================================================================================================
sel=button("dir"):ba.toggle;
dir=_*(1-sel),(0-_)*(sel):>_;
//dev(x)= x*tog:ef.gate_mono(-60,0.1,1,0.1):abs(_)*sensy<:dir:_(+~(%(maxi)))/maxi:abs;
//dev=hslider("deviation", 0, 0, 1, 0.001):si.smoo;
//----filtred deviation
filtr(freq,q)=fi.lowpass(16,freq+q/2) :fi.highpass(16,freq-q/2);

devfi(freqdev,qdev,x)= x:filtr(freqdev,qdev):ef.gate_mono(-60,0.1,1,0.1):abs(_)*0.001:_(+~(%(100)))/100;

//=================================================================================================================
//Dfl con campioni mobili
//=================================================================================================================
dflcvm(md,t,g) = (+ : de.sdelay(md,512, int(t-1)))~*(g) : mem;




//=================================================================================================================
//apf con campioni  mobili
//=================================================================================================================
apfvm(md,t,g) = _ <: *(-g)+(dflcvm(md,t,g)*(1-(g*g)));

//toggle
toggle=(tog:ba.ramp(ma.SR*t/10));


//router
cross(x)= _*x,_*(1-x),_*(1-x),_*x:_,ro.cross(2),_;
//========================================================



//========================================================
//              larlero3
lar3 = environment{
largroup(x) = vgroup("[3]lar3",x);
    t=  largroup(hslider("t", 0.1, 0.001, 1, 0.001));    
    bal = an.rms_envelope_t60(t);
    cntrl=1-bal;
    lar = _ <: cntrl * _;
};